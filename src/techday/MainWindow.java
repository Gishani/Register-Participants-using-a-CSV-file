/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package techday;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author gish
 */
public class MainWindow extends javax.swing.JFrame {

    //static int noOfGroups = 18;
    int noOfGroups = 18;
    //Map<Integer, String> nosOfParticipants;
    int registeredCount;
    Map<String, Developer> allDevelopers;
    Map<String, Developer> registeredDevelopers;
    //ArrayList<ArrayList<Developer>> listsByProduct;
    Map<String, ArrayList<Developer>> listsByProduct;
    ArrayList<Developer> postTrade, platformOrg, fpga, eCoE, ccp, tools, mtech, lseg, sor, ux, surveillance, exchangeProd,
            otc, platform, exchangePlus, mmdProd, machineLearn, liveOPs;
    Map<String, Integer> ranks;
    //ArrayList<Developer> group1, group2, group3, group4, group5, group6, group7, group8, group9, group10, group11, group12,
    //group13, group14, group15, group16, group17, group18;
    FileWriter fw;
    Map<String, Integer> registerNos;
    //boolean checked;
    private String groupDetails;
    private List<Developer>[] developerGroups;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        //registeredCount = 0;
        initComponents();
        ranks = new HashMap<>();
        rankDesignations();
        allDevelopers = new HashMap<>();
        registerNos = new HashMap<>();
        registeredDevelopers = new HashMap<>();

        developerGroups = new ArrayList[noOfGroups];

        for (int i = 0; i < developerGroups.length; i++) {
            developerGroups[i] = new ArrayList<Developer>();
        }
        btnGroup.setVisible(false);
        groupDetails = "./groupDetails.csv";
        try {
            //readCSV();
            readDevelopers();
        } catch (Exception e) {
            System.out.println(e);
        }

        suggest();

        listsByProduct = new HashMap<>();

        postTrade = new ArrayList();
        platformOrg = new ArrayList();
        fpga = new ArrayList();
        eCoE = new ArrayList();
        ccp = new ArrayList();
        tools = new ArrayList();
        mtech = new ArrayList();
        lseg = new ArrayList();
        sor = new ArrayList();
        ux = new ArrayList();
        surveillance = new ArrayList();
        exchangeProd = new ArrayList();
        otc = new ArrayList();
        platform = new ArrayList();
        exchangePlus = new ArrayList();
        mmdProd = new ArrayList();
        machineLearn = new ArrayList();
        liveOPs = new ArrayList();

        setLocationRelativeTo(null);

        /*group1 = new ArrayList();
         group2 = new ArrayList();
         group3 = new ArrayList();
         group4 = new ArrayList();
         group5 = new ArrayList();
         group6 = new ArrayList();
         group7 = new ArrayList();
         group8 = new ArrayList();
         group9 = new ArrayList();
         group10 = new ArrayList();
         group11 = new ArrayList();
         group12 = new ArrayList();
         group13 = new ArrayList();
         group14 = new ArrayList();
         group15 = new ArrayList();
         group16 = new ArrayList();
         group17 = new ArrayList();
         group18 = new ArrayList();*/
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnGroup = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        cmbEmailID = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        btnRegister = new javax.swing.JButton();
        lblRegNo = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MillenniumIT Technology Day 2015");
        setResizable(false);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/header.png"))); // NOI18N
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/registration.png"))); // NOI18N

        btnGroup.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnGroup.setText("Close Registration");
        btnGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGroupActionPerformed(evt);
            }
        });

        cmbEmailID.setEditable(true);
        cmbEmailID.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cmbEmailID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbEmailIDActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("Email ID:");

        btnRegister.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnRegister.setText("Register");
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(cmbEmailID, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnRegister)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbEmailID, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblRegNo.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N

        lblName.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        lblName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(105, 105, 105))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btnGroup)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblRegNo, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(29, 29, 29))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnGroup, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                    .addComponent(lblRegNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 27, Short.MAX_VALUE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed
        boolean found = false;
        String email = (String) cmbEmailID.getSelectedItem();
        //cmbEmailID.gets
        try {
            checkRegistered();
        } catch (Exception e) {
            System.out.println(e);
        }
        if (registerNos.isEmpty()) {
            register(email);
        } else {
            String name;
            int regNo;
            registeredCount = Collections.max(registerNos.values());
            if (registerNos.keySet().contains(email)) {
                name = allDevelopers.get(email).getName();
                regNo = registerNos.get(email);
                JOptionPane.showMessageDialog(this, email + " is already registered");
                lblName.setText(name);
                lblRegNo.setText(regNo + "");
                suggest();
                found = true;
            } else {
                register(email);
            }
        }
    }//GEN-LAST:event_btnRegisterActionPerformed

    private void btnGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGroupActionPerformed

        try {
            readRegistered();
        } catch (Exception e) {
            System.out.println(e);
        }
        for (Developer dev : registeredDevelopers.values()) {
            dividebyProduct(dev);
        }
        sorting();
        addToProdList();

        divideGroups();
        //addToGroup();
        assignNext();

        try {
            writeCSV();
        } catch (Exception e) {
            System.out.println(e);
        }

        for (Developer dev : registeredDevelopers.values()) {
            try {
                writeCSV(dev);
            } catch (Exception e) {
                System.out.println(e);
            }
        }

        JOptionPane.showMessageDialog(this, "Groups are succesfully genereted.", "Success", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnGroupActionPerformed

    private void cmbEmailIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbEmailIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbEmailIDActionPerformed

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        if (evt.getClickCount() == 3) {
            btnGroup.setVisible(!btnGroup.isVisible());
        }
    }//GEN-LAST:event_jLabel1MouseClicked

    void register(String email) {
        boolean found = false;
        //registeredCount++;
        for (Developer dev : allDevelopers.values()) {
            if (email.equals(dev.getEmailId())) {
                registeredCount++;
                dev.setRegistartionNo(registeredCount);
                JOptionPane.showMessageDialog(this, dev.getName() + " is successfully registered");
                lblName.setText(dev.getName() + " :");
                lblRegNo.setText("No " + Integer.toString(registeredCount));
                //dividebyProduct(dev);
                try {
                    writeRegisteredToCSV(dev);
                } catch (Exception e) {
                    System.out.println(e);
                }
                found = true;
                suggest();
                break;
            }
        }
        if (found == false || !checkEmailValid(email)) {
            JOptionPane.showMessageDialog(this, "Invalid Email ID");
            lblName.setText("");
            lblRegNo.setText("");
        }
    }

    boolean checkEmailValid(String mail) {
        if (allDevelopers.keySet().contains(mail)) {
            return true;
        } else {
            return false;
        }
    }

    void rankDesignations() {
        ranks.put("Head of Engineering", 1);
        ranks.put("Assistant Vice President", 2);
        ranks.put("Senior Software Architect", 3);
        ranks.put("Software Architect", 4);
        ranks.put("Associate Software Architect", 5);
        ranks.put("Senior Tech Lead", 6);
        ranks.put("Tech Lead", 7);
        ranks.put("Specialist Software Engineer", 8);
        ranks.put("Lead Consultant", 9);
        ranks.put("UX Lead", 10);
        ranks.put("Specialist UX Engineer", 11);
        ranks.put("Associate Tech Lead", 12);
        ranks.put("Associate Technology Consultant", 13);
        ranks.put("Senior Software Engineer", 14);
        ranks.put("Senior Engineer", 15);
        ranks.put("Senior Technologist", 16);
        ranks.put("Senior UX Engineer", 17);
        ranks.put("Software Engineer", 18);
        ranks.put("Engineer", 19);
        ranks.put("Technologist", 20);
        ranks.put("UX Engineer", 21);
        ranks.put("Technology Consultant", 22);
        ranks.put("Intern", 23);
    }

    void readDevelopers() throws FileNotFoundException, IOException {
        BufferedReader br = new BufferedReader(new FileReader("./developers.csv"));
        String emailId, name, designation, product;
        int rank;
        String line = br.readLine();
        while ((line = br.readLine()) != null && !line.isEmpty()) {
            String[] fields = line.split(",");
            emailId = fields[0];
            name = fields[1];
            designation = fields[2];
            product = fields[3];
            Developer dev = new Developer();
            dev.setEmailId(emailId);
            dev.setName(name);
            for (String title : ranks.keySet()) {
                rank = ranks.get(title);
                if (designation.equals(title)) {
                    dev.setDesignation(rank);
                    break;
                }
            }
            dev.setProduct(product);
            //dev.setRegistration(false);
            allDevelopers.put(dev.getEmailId(), dev);
        }
        br.close();
    }

    void suggest() {
        cmbEmailID.setSelectedItem("");
        Vector<String> suggestions = new Vector<>();
        for (Developer dev : allDevelopers.values()) {
            suggestions.add(dev.getEmailId());
        }

        if (cmbEmailID.getSelectedIndex() == -1) {
            for (int i = 0; i < suggestions.size(); i++) {
                final String Str = suggestions.get(i);
                cmbEmailID.addItem(Str);
            }
        }
        cmbEmailID.getEditor().getEditorComponent().addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() != 38 && e.getKeyCode() != 40 && e.getKeyCode() != 10) {
                    String a = cmbEmailID.getEditor().getItem().toString();
                    cmbEmailID.removeAllItems();
                    for (int i = 0; i < suggestions.size(); i++) {
                        final String Str = suggestions.get(i);

                        if (Str.toLowerCase().startsWith(a.toLowerCase())) {
                            cmbEmailID.addItem(Str);
                        }
                    }
                    cmbEmailID.getEditor().setItem(new String(a));
                    cmbEmailID.hidePopup();
                    if (cmbEmailID.getItemCount() != 0) {
                        cmbEmailID.showPopup();
                    }
                }
            }
        });
    }

    void checkRegistered() throws FileNotFoundException, IOException {
        File file = new File("./registered.csv");
        if (!file.exists()) {
            file.createNewFile();
        }

        BufferedReader br = new BufferedReader(new FileReader(file));

        int registrationNo;
        String emailId, line;
        while ((line = br.readLine()) != null && !line.isEmpty()) {
            String[] fields = line.split(",");
            registrationNo = Integer.parseInt(fields[0]);
            emailId = fields[1];
            registerNos.put(emailId, registrationNo);
        }
        br.close();
    }

    void dividebyProduct(Developer dev) {

        if ("Post Trade".equalsIgnoreCase(dev.getProduct())) {
            postTrade.add(dev);
        }
        if ("Platform Organization".equalsIgnoreCase(dev.getProduct())) {
            platformOrg.add(dev);
        }
        if ("FPGA".equalsIgnoreCase(dev.getProduct())) {
            fpga.add(dev);
        }
        if ("Engineering CoE".equalsIgnoreCase(dev.getProduct())) {
            eCoE.add(dev);
        }
        if ("Central Counter Party".equalsIgnoreCase(dev.getProduct())) {
            ccp.add(dev);
        }
        if ("Tools".equalsIgnoreCase(dev.getProduct())) {
            tools.add(dev);
        }
        if ("Mtech".equalsIgnoreCase(dev.getProduct())) {
            mtech.add(dev);
        }
        if ("London Stock Exchange Group".equalsIgnoreCase(dev.getProduct())) {
            lseg.add(dev);
            //System.out.println("lseg");
        }
        if ("Smart Order Routing".equalsIgnoreCase(dev.getProduct())) {
            sor.add(dev);
        }
        if ("UX".equalsIgnoreCase(dev.getProduct())) {
            ux.add(dev);
        }
        if ("Surveillance".equalsIgnoreCase(dev.getProduct())) {
            surveillance.add(dev);
        }
        if ("Exchange Product".equalsIgnoreCase(dev.getProduct())) {
            exchangeProd.add(dev);
        }
        if ("Over The Counter".equalsIgnoreCase(dev.getProduct())) {
            otc.add(dev);
        }
        if ("Platform".equalsIgnoreCase(dev.getProduct())) {
            platform.add(dev);
        }
        if ("Exchange Plus".equalsIgnoreCase(dev.getProduct())) {
            exchangePlus.add(dev);
        }
        if ("MMD Product".equalsIgnoreCase(dev.getProduct())) {
            mmdProd.add(dev);
        }
        if ("Machine Learning".equalsIgnoreCase(dev.getProduct())) {
            machineLearn.add(dev);
        }
        if ("Live Ops".equalsIgnoreCase(dev.getProduct())) {
            liveOPs.add(dev);
        }
    }

    public void writeRegisteredToCSV(Developer dev) throws IOException {

        fw = new FileWriter("./registered.csv", true);
        PrintWriter pw = new PrintWriter(fw);

        pw.print(dev.getRegistartionNo());
        pw.print(",");
        pw.print(dev.getEmailId());
        pw.print(",");
        pw.print(dev.getName());
        pw.print(",");
        pw.print(dev.getProduct());
        pw.print(",");
        pw.println(dev.getDesignation());

        //registeredDevelopers.put(dev.getEmailId(), dev);
        pw.flush();
        pw.close();
        fw.close();
    }

    void sorting() {
        Collections.sort(postTrade);
        Collections.sort(platformOrg);
        Collections.sort(fpga);
        Collections.sort(eCoE);
        Collections.sort(ccp);
        Collections.sort(tools);
        Collections.sort(mtech);
        Collections.sort(lseg);
        Collections.sort(sor);
        Collections.sort(ux);
        Collections.sort(surveillance);
        Collections.sort(exchangeProd);
        Collections.sort(otc);
        Collections.sort(platform);
        Collections.sort(exchangePlus);
        Collections.sort(mmdProd);
        Collections.sort(machineLearn);
        Collections.sort(liveOPs);
    }

    void addToProdList() {
        listsByProduct.put("ux", ux);
        listsByProduct.put("postTrade", postTrade);
        listsByProduct.put("platformOrg", platformOrg);
        listsByProduct.put("fpga", fpga);
        listsByProduct.put("eCoE", eCoE);
        listsByProduct.put("ccp", ccp);
        listsByProduct.put("tools", tools);
        listsByProduct.put("mtech", mtech);
        listsByProduct.put("lseg", lseg);
        listsByProduct.put("sor", sor);
        listsByProduct.put("surveillance", surveillance);
        listsByProduct.put("exchangeProd", exchangeProd);
        listsByProduct.put("otc", otc);
        listsByProduct.put("platform", platform);
        listsByProduct.put("exchangePlus", exchangePlus);
        listsByProduct.put("mmdProd", mmdProd);
        listsByProduct.put("machineLearn", machineLearn);
        listsByProduct.put("liveOPs", liveOPs);
    }

    void readRegistered() throws FileNotFoundException, IOException {
        BufferedReader br = new BufferedReader(new FileReader("./registered.csv"));
        int registrationNo, rank;
        String emailId, name, product, line;
        while ((line = br.readLine()) != null && !line.isEmpty()) {
            String[] fields = line.split(",");
            registrationNo = Integer.parseInt(fields[0]);
            emailId = fields[1];
            name = fields[2];
            product = fields[3];
            rank = Integer.parseInt(fields[4]);
            Developer dev = new Developer();
            dev.setRegistartionNo(registrationNo);
            dev.setEmailId(emailId);
            dev.setName(name);
            dev.setProduct(product);
            dev.setDesignation(rank);
            registeredDevelopers.put(dev.getEmailId(), dev);
        }
        br.close();
    }

    /*public void divideGroups() {
     Developer dev;
     for (int i = 0; i < noOfGroups; i++) {
     for (ArrayList<Developer> list : listsByProduct.values()) {
     if (i > 0 && i >= list.size()) {
     //break group;
     continue;
     }
     if ((list.size() > 0)) {
     dev = list.get(i);
                    
     dev.setGroup(i + 1);
                    
     }
     }
     }
     }*/
    public void divideGroups() {
        //int groupNo = 0;
        //int maxLimit;
        int counter;
        //maxLimit = registeredCount/noOfGroups;

        //maxLimit = ((registeredCount%noOfGroups) == 0 ? maxLimit : maxLimit + 1);
        counter = 0;

        for (ArrayList<Developer> devList : listsByProduct.values()) {
            for (Developer dev : devList) {
                dev.setGroup(counter);
                developerGroups[counter].add(dev);
                counter = (counter + 1) % noOfGroups;
            }

        }

    }

    /*void addToGroup() {
     String group;
     for (Developer dev : registeredDevelopers.values()) {
     group = Integer.toString(dev.getGroup());
     if ("1".equals(group)) {
     group1.add(dev);
     }
     if ("2".equals(group)) {
     group2.add(dev);
     }
     if ("3".equals(group)) {
     group3.add(dev);
     }
     if ("4".equals(group)) {
     group4.add(dev);
     }
     if ("5".equals(group)) {
     group5.add(dev);
     }
     if ("6".equals(group)) {
     group6.add(dev);
     }
     if ("7".equals(group)) {
     group7.add(dev);
     }
     if ("8".equals(group)) {
     group8.add(dev);
     }
     if ("9".equals(group)) {
     group9.add(dev);
     }
     if ("10".equals(group)) {
     group10.add(dev);
     }
     if ("11".equals(group)) {
     group11.add(dev);
     }
     if ("12".equals(group)) {
     group12.add(dev);
     }
     if ("13".equals(group)) {
     group13.add(dev);
     }
     if ("14".equals(group)) {
     group14.add(dev);
     }
     if ("15".equals(group)) {
     group15.add(dev);
     }
     if ("16".equals(group)) {
     group16.add(dev);
     }
     if ("17".equals(group)) {
     group17.add(dev);
     }
     if ("18".equals(group)) {
     group18.add(dev);
     }
     }
     }*/

    /*void assignNext(ArrayList<Developer> group) {
     Collections.sort(group);
     int i = 0;
     Developer tableHead, dev1, dev2;
     if (group.size() > 1) {
     tableHead = group.get(i);
     for (String mail : registeredDevelopers.keySet()) {
     if (tableHead.getEmailId().equals(mail)) {
     tableHead.setNext(Integer.toString(registeredDevelopers.get(mail).getGroup()));
     break;
     }
     }
     i++;
     dev1 = group.get(i);
     dev1.setNext(tableHead.getEmailId());
     while (i < (group.size() - 1)) {
     i++;
     dev2 = group.get(i);
     dev2.setNext(dev1.getEmailId());
     dev1 = dev2;
     }
     }
     }*/
    public void writeCSV() throws IOException {
        groupDetails = "./groupDetails.csv";
        try {
            fw = new FileWriter(groupDetails, false);
        } catch (Exception e) {
            e.printStackTrace();
        }

        PrintWriter pw = new PrintWriter(fw);
        pw.print("EmailID");
        pw.print(",");
        pw.print("Registration No");
        pw.print(",");
        pw.print("Group No");
        pw.print(",");
        pw.println("Assignee");
        pw.flush();
        pw.close();
        fw.close();
    }

    public void writeCSV(Developer dev) throws IOException {
        //fw = new FileWriter("C:\\Users\\gish\\Desktop\\registered2.csv", true);
        try {
            fw = new FileWriter(groupDetails, true);
        } catch (Exception e) {
            e.printStackTrace();
        }

        PrintWriter pw = new PrintWriter(fw);
        pw.print(dev.getEmailId());
        pw.print(",");
        pw.print(dev.getRegistartionNo());
        pw.print(",");
        pw.print("Group " + (dev.getGroup() + 1));
        pw.print(",");
        pw.println(dev.getNext());
        pw.flush();
        pw.close();
        fw.close();
    }

    private void assignNext() {
        for (List<Developer> devs : developerGroups) {
            Collections.sort(devs);
            final Developer groupLeader = devs.get(0);

            groupLeader.setNext("Table " + (groupLeader.getGroup() + 1));

            for (int i = 1; i < devs.size(); i++) {
                devs.get(i).setNext(devs.get(i - 1).getEmailId());
            }

        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (Exception ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }

                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGroup;
    private javax.swing.JButton btnRegister;
    private javax.swing.JComboBox cmbEmailID;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblRegNo;
    // End of variables declaration//GEN-END:variables

}
